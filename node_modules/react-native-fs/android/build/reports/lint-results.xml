<?xml version="1.0" encoding="UTF-8"?>
<issues format="5" by="lint 3.4.0">

    <issue
        id="DefaultLocale"
        severity="Warning"
        message="Implicitly using the default locale is a common source of bugs: Use `toLowerCase(Locale)` instead. For strings meant to be internal use `Locale.ROOT`, otherwise `Locale.getDefault()`."
        category="Correctness"
        priority="6"
        summary="Implied default locale in case conversion"
        explanation="Calling `String#toLowerCase()` or `#toUpperCase()` **without specifying an explicit locale** is a common source of bugs. The reason for that is that those methods will use the current locale on the user&apos;s device, and even though the code appears to work correctly when you are developing the app, it will fail in some locales. For example, in the Turkish locale, the uppercase replacement for `i` is **not** `I`.&#xA;&#xA;If you want the methods to just perform ASCII replacement, for example to convert an enum name, call `String#toUpperCase(Locale.US)` instead. If you really want to use the current locale, call `String#toUpperCase(Locale.getDefault())` instead."
        url="http://developer.android.com/reference/java/util/Locale.html#default_locale"
        urls="http://developer.android.com/reference/java/util/Locale.html#default_locale"
        errorLine1="            type = MimeTypeMap.getSingleton().getMimeTypeFromExtension(extension.toLowerCase());"
        errorLine2="                                                                                 ~~~~~~~~~~~">
        <location
            file="/home/pritamsankadiya/Desktop/testMayank/BirthdayReminder/node_modules/react-native-fs/android/src/main/java/com/rnfs/Uploader.java"
            line="180"
            column="82"/>
    </issue>

    <issue
        id="NewApi"
        severity="Error"
        message="Call requires API level 19 (current min is 16): `android.content.ContextWrapper#getExternalFilesDirs`"
        category="Correctness"
        priority="6"
        summary="Calling new methods on older versions"
        explanation="This check scans through all the Android API calls in the application and warns about any calls that are not available on **all** versions targeted by this application (according to its minimum SDK attribute in the manifest).&#xA;&#xA;If you really want to use this API and don&apos;t need to support older devices just set the `minSdkVersion` in your `build.gradle` or `AndroidManifest.xml` files.&#xA;&#xA;If your code is **deliberately** accessing newer APIs, and you have ensured (e.g. with conditional execution) that this code will only ever be called on a supported platform, then you can annotate your class or method with the `@TargetApi` annotation specifying the local minimum SDK to apply, such as `@TargetApi(11)`, such that this check considers 11 rather than your manifest file&apos;s minimum SDK as the required API level.&#xA;&#xA;If you are deliberately setting `android:` attributes in style definitions, make sure you place this in a `values-v`*NN* folder in order to avoid running into runtime conflicts on certain devices where manufacturers have added custom attributes whose ids conflict with the new ones on later platforms.&#xA;&#xA;Similarly, you can use tools:targetApi=&quot;11&quot; in an XML file to indicate that the element will only be inflated in an adequate context."
        errorLine1="    File[] allExternalFilesDirs = this.getReactApplicationContext().getExternalFilesDirs(null);"
        errorLine2="                                                                    ~~~~~~~~~~~~~~~~~~~~">
        <location
            file="/home/pritamsankadiya/Desktop/testMayank/BirthdayReminder/node_modules/react-native-fs/android/src/main/java/com/rnfs/RNFSManager.java"
            line="837"
            column="69"/>
    </issue>

    <issue
        id="GradleDependency"
        severity="Warning"
        message="A newer version of com.android.tools.build:gradle than 1.5.0 is available: 3.4.1"
        category="Correctness"
        priority="4"
        summary="Obsolete Gradle Dependency"
        explanation="This detector looks for usages of libraries where the version you are using is not the current stable release. Using older versions is fine, and there are cases where you deliberately want to stick with an older version. However, you may simply not be aware that a more recent version is available, and that is what this lint check helps find."
        errorLine1="        classpath &apos;com.android.tools.build:gradle:1.5.0&apos;"
        errorLine2="        ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="/home/pritamsankadiya/Desktop/testMayank/BirthdayReminder/node_modules/react-native-fs/android/build.gradle"
            line="11"
            column="9"/>
    </issue>

    <issue
        id="GradleDynamicVersion"
        severity="Warning"
        message="Avoid using + in version numbers; can lead to unpredictable and unrepeatable builds (com.facebook.react:react-native:+)"
        category="Correctness"
        priority="4"
        summary="Gradle Dynamic Version"
        explanation="Using `+` in dependencies lets you automatically pick up the latest available version rather than a specific, named version. However, this is not recommended; your builds are not repeatable; you may have tested with a slightly different version than what the build server used. (Using a dynamic version as the major version number is more problematic than using it in the minor version position.)"
        errorLine1="    implementation &apos;com.facebook.react:react-native:+&apos;"
        errorLine2="    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="/home/pritamsankadiya/Desktop/testMayank/BirthdayReminder/node_modules/react-native-fs/android/build.gradle"
            line="33"
            column="5"/>
    </issue>

    <issue
        id="Recycle"
        severity="Warning"
        message="This `Cursor` should be freed up after use with `#close()`"
        category="Performance"
        priority="7"
        summary="Missing `recycle()` calls"
        explanation="Many resources, such as TypedArrays, VelocityTrackers, etc., should be recycled (with a `recycle()` call) after use. This lint check looks for missing `recycle()` calls."
        errorLine1="        Cursor cursor = reactContext.getContentResolver().query(uri, null, null, null, null);"
        errorLine2="                                                          ~~~~~">
        <location
            file="/home/pritamsankadiya/Desktop/testMayank/BirthdayReminder/node_modules/react-native-fs/android/src/main/java/com/rnfs/RNFSManager.java"
            line="90"
            column="59"/>
    </issue>

    <issue
        id="StaticFieldLeak"
        severity="Warning"
        message="This `AsyncTask` class should be static or leaks might occur (anonymous com.rnfs.RNFSManager.CopyFileTask)"
        category="Performance"
        priority="6"
        summary="Static Field Leaks"
        explanation="A static field will leak contexts.&#xA;&#xA;Non-static inner classes have an implicit reference to their outer class. If that outer class is for example a `Fragment` or `Activity`, then this reference means that the long-running handler/loader/task will hold a reference to the activity which prevents it from getting garbage collected.&#xA;&#xA;Similarly, direct field references to activities and fragments from these longer running instances can cause leaks.&#xA;&#xA;ViewModel classes should never point to Views or non-application Contexts."
        errorLine1="        new CopyFileTask() {"
        errorLine2="        ^">
        <location
            file="/home/pritamsankadiya/Desktop/testMayank/BirthdayReminder/node_modules/react-native-fs/android/src/main/java/com/rnfs/RNFSManager.java"
            line="327"
            column="9"/>
    </issue>

    <issue
        id="StaticFieldLeak"
        severity="Warning"
        message="This `AsyncTask` class should be static or leaks might occur (anonymous com.rnfs.RNFSManager.CopyFileTask)"
        category="Performance"
        priority="6"
        summary="Static Field Leaks"
        explanation="A static field will leak contexts.&#xA;&#xA;Non-static inner classes have an implicit reference to their outer class. If that outer class is for example a `Fragment` or `Activity`, then this reference means that the long-running handler/loader/task will hold a reference to the activity which prevents it from getting garbage collected.&#xA;&#xA;Similarly, direct field references to activities and fragments from these longer running instances can cause leaks.&#xA;&#xA;ViewModel classes should never point to Views or non-application Contexts."
        errorLine1="    new CopyFileTask() {"
        errorLine2="    ^">
        <location
            file="/home/pritamsankadiya/Desktop/testMayank/BirthdayReminder/node_modules/react-native-fs/android/src/main/java/com/rnfs/RNFSManager.java"
            line="350"
            column="5"/>
    </issue>

    <issue
        id="StaticFieldLeak"
        severity="Warning"
        message="This `AsyncTask` class should be static or leaks might occur (com.rnfs.RNFSManager.CopyFileTask)"
        category="Performance"
        priority="6"
        summary="Static Field Leaks"
        explanation="A static field will leak contexts.&#xA;&#xA;Non-static inner classes have an implicit reference to their outer class. If that outer class is for example a `Fragment` or `Activity`, then this reference means that the long-running handler/loader/task will hold a reference to the activity which prevents it from getting garbage collected.&#xA;&#xA;Similarly, direct field references to activities and fragments from these longer running instances can cause leaks.&#xA;&#xA;ViewModel classes should never point to Views or non-application Contexts."
        errorLine1="  private class CopyFileTask extends AsyncTask&lt;String, Void, Exception> {"
        errorLine2="                ~~~~~~~~~~~~">
        <location
            file="/home/pritamsankadiya/Desktop/testMayank/BirthdayReminder/node_modules/react-native-fs/android/src/main/java/com/rnfs/RNFSManager.java"
            line="363"
            column="17"/>
    </issue>

</issues>
